package engine.math;

public class Matrix4f {
	public static final int SIZE  = 4;
	private float[] elements = new float[SIZE * SIZE];
	
	public static Matrix4f identity() {
		Matrix4f result = new Matrix4f();
		for (int i = 0; i < SIZE; i++) {
			for (int j = 0; j < SIZE; j++) {
				result.set(i, j, i == j? 1.0f: 0.0f);	
			}
		}
		return result;
	}
	
	public static Matrix4f translate(Vector3f translate) {
		Matrix4f result = Matrix4f.identity();
		result.set(0, 3, translate.getX());
		result.set(1, 3, translate.getY());
		result.set(2, 3, translate.getZ());
		return result;
	}
	
	public static Matrix4f scale(Vector3f Scale) {
		Matrix4f result = Matrix4f.identity();
		result.set(0, 0, Scale.getX());
		result.set(1, 1, Scale.getY());
		result.set(2, 2, Scale.getZ());
		return result;
	}
	
	public static Matrix4f scale(float angle , Vector3f axis) {
		Matrix4f result = Matrix4f.identity();
		float sin = (float)Math.sin(Math.toRadians(angle));
		float cos = (float)Math.cos(Math.toRadians(angle));
	    float C = 1- cos;
	    float X = axis.getX();
	    float Y = axis.getY();
	    float Z = axis.getZ();
	    
	    result.set(0, 0, cos + X*X*C );
	    result.set(0, 1, X*Y*C + Z*sin);
	    result.set(0, 2, X*Z*C + Y*sin);
	    result.set(1, 0, Y*X*C + Z*sin);
	    result.set(1, 1, cos + Y*Y*C);
	    result.set(1, 2, Y*Z*C - X*sin);
	    result.set(2, 0, Z*X*C - Y*sin);
	    result.set(2, 1, Z*Y*C + X*sin);
	    result.set(2, 2, cos + Z*Z*C);
		
		return result;
	}
	
	public float get(int x , int y) {
		return elements[y*SIZE+x];
	}
	
	public void set(int x , int y, float value) {
		 elements[y*SIZE+x] = value;
	}
	
	public float[] getAll() {
		return elements;
	}
}
